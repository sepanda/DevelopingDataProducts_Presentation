?rnorm
args("rnorm")
rnorm
clear
clc
R.version
R
R.
?lapply
R.version.string
getwd()
dir()
version
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
for(i in 1:10){}
for(i in 1:10){print(i)}
?seq_along
?length
c(1:4)
1:4
list(1:4)
list(1:4,"2")
[[2]]
clear#
clear
search()
ls
ls()
pwd
pwd()
getwd
getwd()
age <- c(01,03,05,02,11)
weight <- (4.4,5.3,7.2,5.2,8.5)
weight <- c(4.4,5.3,7.2,5.2,8.5)
age
age <- c(age,09,03,09,12,03)
weight <- c(weight,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
q()
data()
ls()
lm(mpg~wt, data=mtcars)
lm(mpg~wt, data=mtcars)
lmfit <- lm(mpg~wt, data=mtcars)
summary(lmfit)
plot(lmfit)
m <- matrix(1:20,nrow=5,ncol=4)
m
m <- matrix(1:20,nrow=5,ncol=4,dimnames=list(c("R1,R2,R3,R4"),c("C1,C2,C3,C4")))
m <- matrix(1:20,nrow=5,ncol=4,dimnames=list(c("R1,R2,R3,R4,R5"),c("C1,C2,C3,C4")))
m <- matrix(1:16,nrow=4,ncol=4,dimnames=list(c("R1,R2,R3,R4,R5"),c("C1,C2,C3,C4")))
m <- matrix(1:16,nrow=4,ncol=4,dimnames=list(c("R1,R2,R3,R4"),c("C1,C2,C3,C4")))
rnames <- c("R1,R2,R3,R4")
cnames <- c("C1,C2,C3,C4")
m <- matrix(1:16,nrow=4,ncol=4,dimnames=list(rnames,cnames))
m <- matrix(1:20,nrow=5,ncol=4,dimnames=list(c("R1","R2","R3"","R4"","R5"),c("C1","C2","C3","C4")))
m <- matrix(1:20,nrow=5,ncol=4,dimnames=list(c("R1","R2","R3"","R4","R5"),c("C1","C2","C3","C4")))
m <- matrix(1:20,nrow=5,ncol=4,dimnames=list(c("R1","R2","R3","R4","R5"),c("C1","C2","C3","C4")))
m
m$C1
m[C1]
m[,C1]
patientID <- c(1,2,3,4)
age<- c(25,34,38.52)
diabetes <-("Type 1", "Type 2", "Type 1", "Type 1")
diabetes <- c("Type 1", "Type 2", "Type 1", "Type 1")
status <- c("Poor","Improved", "Excellent","Poor")
patientData <- data.frame(patientID,age,diabetes,status)
patientID
age
age<- c(25,34,38,52)
age
patientData <- data.frame(patientID,age,diabetes,status)
patientData$age
patientData$status
patientData
patientData[1:3]
patientData[c(1,3)]
patientData[c(PatientID,status)]
patientData[c("PatientID","status")]
patientData[c("diabetes","status")]
diabetes <- factor(diabetes)
status <- factor(status,order=TRUE,levels=c("Excellent","Improved","Poor"))
patientData <- data.frame(patientID,age,diabetes,status)
str(patientData)
attach(patientData)
age
detach(patientData)
table(patientData$diabetes,patientData$status)
mydata <- data.frame(age=numeric(0),gender=numeric(0),weight=numeric(0))
edit(mydata)
?as.factor
mydata$State <- as.factor(mydata$state)
str(mydata)
mydata$State <- factor(mydata$state,levels=list("Well","Unwell"))
str(mydata)
mtcars
str(mtcars)
plot(mtcars$wt,mtcars$mpg)
abline(lm(metcars$wt,mtcars$mpg))
abline(lm(metcars$wt~mtcars$mpg))
abline(lm(mtcars$wt~mtcars$mpg))
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
?abline
pdf("mygraph.pdf")
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
dev.off()
getwd()
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type="b")
plot(dose, drugA)
plot(dose, drugA, type="b")
plot(dose, drugA, type="b", lty=2, pch=17)
library(xlsx)
?par
?mar
?par::mar
install.packages("ggplot2")
library(datasets)
head(airquality])
head(airquality
)
hist(airquality$Ozone)
hist(airquality)
plot(airquality$Ozone,airquality$Solar.r)
plot(airquality$Ozone,airquality$wind)
plot(airquality$Ozone,airquality$temp)
plot(airquality$Ozone,airquality$temp)
plot(x=airquality$Ozone,y=airquality$temp)
?plot
hist(airquality$Ozone,col="blue")
with(airquality,plot(Ozone,Wind))
?plot
title("a plot")
title("Airquality Ozone Vs. Wind")
?type
type(airquality)
typeof(airquality)
typeof(airquality$Ozone)
typeof(airquality$Wind)
typeof(airquality$Solar.r)
typeof(airquality$Solar.R
)
?boxplot
wiht(airquality,boxplot(Ozone,Wind))
with(airquality,boxplot(Ozone,Wind))
boxplot(airquality$Ozone,airquality$Wind)
boxplot(Ozone ~ Wind,airquality)
names(airquality)
boxplot(Ozone ~ Month,airquality)
airquality$Month
?transform
airquality[,3]
airquality[,5]
airquality[,Month]
airquality[,5]==5
airquality$Motnh==5
airquality$Month==5
airquality(Month)
airquality[Month==5,]
airquality[airquality$Month==5,]
airquality$Day[airquality$Month==5,]
airquality[airquality$Month==5,]$Day
airquality[airquality$Month==5,]$Day==1
airquality[airquality$Month==5,]$Day[1,]
airquality[airquality$Month==5,]$Day
colors()
par()
xfig()
windows()
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
x<- rnorm(100)
plot(x,z)
z<- rnorm(100)
plot(x,z)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
plot(x,y,pch=19)
plot(x,y,pch=2)
plot(x,y,pch=3)
plot(x,y,pch=4)
plot(x,y,pch=5)
plot(x,y,pch=6)
plot(x,y,pch=7)
plot(x,y,pch=8)
plot(x,y,pch=9)
plot(x,y,pch=10)
example(points)
?points
plot(x,y,pch=20)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y,pch=20)
title("scatterplot")
par(mar)
par("mar")
par(mar=c(4,4,2,2))
plot(x,y,pch=20)
title("scatterplot")
text(-2,-2,"hello")
legend("topleft",legend = "Data", pch=20)
fit <- lm(y~x)
abline(fit,lwd=4)
abline(fit,lwd=4,col=blue)
abline(fit,lwd=4,col="blue")
plot(x,y,xlab="Weight",ylab="Height", main="Scatterplot",pch=20)
legend("topright",legend="Data",pch=20)
fit <- lm(y~x)
abline(fit,lwd=3,col="red")
z <- rpois(100)
z <- rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=3)
par(mar=c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=3)
par(mar=c(3,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=3)
par(mfrow=c(1,2))
par(mar=c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=5)
par(mfrow = c(2,2))
plot(x,y,pch=20)
plot(x,z,pch=22)
plot(x,y,pch=25)
plot(x,z,pch=30)
par(mfrow=c(1,1))
plot(x,z,pch=4)
par(mfrow=c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
?gl
g <- gl(2,50)
g
g <- gl(2,50,labels = c("Male","Female"))
g
str(g)
plot(x,y)
plot(x,y, type="n")
points(x[g=="Male"],y[g=="Male"],col="green")
points(x[g=="Female"],y[g=="Female"],col="blue")
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(stuydents2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,col=sex_class,into=c("sex","class"))
main()
exit
exit()
library(knitr)
knit_engines
knit_engines$get("python")
names(knit_engines$get())
knit_engines$get("awk")
knit_engines
knit_engines()
knit_engines$get("python")
x1 <- [0,0]
x1 <- (0,0)
x1 <- c(0,0)
x2 <- c(100,40)
sqrt( sum( ( c(53,15) - x1)^2 ) )
?apply
candidates <- matrix(c(53,15,
53,18,
66,5,
58,13),nrow=4,ncol=2)
candidates
apply(candidates,margin=1,sum)
apply(candidates,margin=1,FUN=sum)
apply(candidates,MARGIN=1,FUN=sum)
apply(candidates,MARGIN=1,FUN= function(x){})
apply(candidates,MARGIN=1,FUN= function(x){sum(x)})
apply(candidates,MARGIN=1,FUN= function(x){sum( (x - x1)^2 )})
candidates <- matrix(c(53,15,
53,18,
66,5,
58,13),nrow=4,ncol=2,byrow=TRUE)
apply(candidates,MARGIN=1,FUN= function(x){sum( (x - x1)^2 )})
apply(candidates,MARGIN=1,FUN= function(x){sqrt( sum( (x - x1)^2 ) )})
# Get the 2 norms from x1
apply(candidates,MARGIN=1,FUN= function(x){sqrt( sum( (x - x1)^2 ) )})
# Get the 2 norms from x2
apply(candidates,MARGIN=1,FUN= function(x){sqrt( sum( (x - x2)^2 ) )})
two_norm <- function(a,b){
sqrt( sum( (a - b)^2 ) )
}
two_norm(c(53,15),c(0,0))
d2x1 <- apply(candidates,MARGIN=1,FUN=two_norm(x,x1))
d2x1 <- apply(candidates,MARGIN=1,FUN=function(x){two_norm(x,x1)})
d2x1
one_norm <- function(a,b){
sum( abs(a-b) )
}
# Get the 2 norms from x1
d2x1 <- apply(candidates,
MARGIN=1,
FUN = function(x){two_norm(x,x1)})
# Get the 2 norms from x2
d2x2 <- apply(candidates,
MARGIN=1,
FUN = function(x){two_norm(x,x2)})
# Get the 2 norms from x1
d1x1 <- apply(candidates,
MARGIN=1,
FUN = function(x){one_norm(x,x1)})
# Get the 2 norms from x2
d1x2 <- apply(candidates,
MARGIN=1,
FUN = function(x){one_norm(x,x2)})
d1x1
d2x1
c( d1x1, d2x1 )
rbind( d1x1, d2x1 )
rbind( d1x1, d2x1, d1x2,d2x2 )
rbind( d1x1-d2x1, d1x2-d2x2 )
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages(Rtools)
setwd("D:/Work/Coursera/Reasoning Data Analysis and Statistical Inference - Duke/Data Analysis and Statistical Inference/Quiz6")
qt(0.975)
qt(0.975,21)
2.869/3.008
setwd("D:/Work/Coursera/Data Science/9 Developing Data Products/Homework/Project/ShinyApp")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(knitr)
setwd("D:/Work/Coursera/Data Science/9 Developing Data Products/Homework/Project/ShinyApp/www")
knit2html("EducationIncomeSexReligionHelp.Rmd"); browseURL("EducationIncomeSexReligionHelp.html")
knit2html("EducationIncomeSexReligionHelp.Rmd"); browseURL("EducationIncomeSexReligionHelp.html")
knit2html("EducationIncomeSexReligionHelp.Rmd"); browseURL("EducationIncomeSexReligionHelp.html")
runApp()
setwd("D:/Work/Coursera/Data Science/9 Developing Data Products/Homework/Project/ShinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
library(shinyapps)
deployApp()
setwd("D:/Work/Coursera/Data Science/9 Developing Data Products/Homework/Project/SlidePresentation")
library(slidify)
author("IncomeEducation")
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
data(occupationalStatus)
names(occupationalStatus)
data(bigcity)
library(car)
data(States)
names(States)
library(dplyr)
?tbl_df
str(States)
?States
library(Ecdat)
library(plm)
View(States)
View(States)
uniq(States$region)
unique(States$region)
slidify('index.Rmd'); browseURL('index.html')
?barplot
slidify('index.Rmd'); browseURL('index.html')
?select
slidify('index.Rmd'); browseURL('index.html')
States_tbl <- tbl_df(States)
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay))
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay)) %>%
barplot
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay)) %>%
plot
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay)) %>%
table
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay)) %>%
table %>% barplot
States_tbl %>%
group_by(region) %>%
select(pay) %>%
mean %>%
table %>% barplot
library(car)
library(dplyr)
library(ggplot)
data(States)
States_tbl <- tbl_df(States)
States_tbl %>%
group_by(region) %>%
select(pay) %>%
summarize(avgTeachPay=mean(pay)) %>%
ggplot(aes(x=region,y=avgTeachPay)) + geom_bar(stat="identity")
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
library(car); library(dplyr); library(ggplot2)
data(States); States_tbl <- tbl_df(States)
States_tbl %>% group_by(region) %>% select(pay) %>% summarize(avgTeachPay=mean(pay))
library(car); library(dplyr); library(ggplot2)
data(States); States_tbl <- tbl_df(States)
States_tbl %>% group_by(region) %>% select(pay) %>% summarize(avgTeachPay=mean(pay*1e3))
library(car); library(dplyr); library(ggplot2)
data(States); States_tbl <- tbl_df(States)
States_tbl %>% group_by(region) %>% select(pay) %>% summarize(avgTeachPay=mean(pay*1e3)) %>% table
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
?melt
States_tbl %>% group_by(region) %>% select(pay) %>% summarize(avgTeachPay=mean(pay*1e3)) %>% t
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
slidify('index.Rmd'); browseURL('index.html')
